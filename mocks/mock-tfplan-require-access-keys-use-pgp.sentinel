import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"aws_iam_access_key": {
				"roger": {
					0: {
						"applied": {
							"pgp_key": "keybase:roger",
							"user":    "roger",
						},
						"diff": {
							"encrypted_secret": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"key_fingerprint": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"pgp_key": {
								"computed": false,
								"new":      "keybase:roger",
								"old":      "",
							},
							"secret": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"ses_smtp_password": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"status": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"user": {
								"computed": false,
								"new":      "roger",
								"old":      "",
							},
						},
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "0.12.3"

variables = {}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
