import "strings"
import "types"

outputs = {}

_modules = {
	"root": {
		"data": {
			"aws_acm_certificate": {
				"cert_1": {
					0: {
						"attr": {
							"arn":         "arn:aws:acm:us-east-1:753646501470:certificate/1f485f70-2bc1-4ae3-a30f-a533605e99b9",
							"domain":      "cam-vault.hashidemos.io",
							"id":          "2019-07-03 19:22:43.91122925 +0000 UTC",
							"key_types":   null,
							"most_recent": false,
							"statuses":    null,
							"types":       null,
						},
						"depends_on": [],
						"id":         "2019-07-03 19:22:43.91122925 +0000 UTC",
						"tainted":    false,
					},
				},
				"cert_2": {
					0: {
						"attr": {
							"arn":         "arn:aws:acm:us-east-1:753646501470:certificate/5c9b4d26-b955-4c55-a895-ee7c87020526",
							"domain":      "roger-ptfe.hashidemos.io",
							"id":          "2019-07-03 19:22:44.071945009 +0000 UTC",
							"key_types":   null,
							"most_recent": false,
							"statuses":    null,
							"types":       null,
						},
						"depends_on": [],
						"id":         "2019-07-03 19:22:44.071945009 +0000 UTC",
						"tainted":    false,
					},
				},
			},
		},
		"path":      [],
		"resources": {},
	},
}

module_paths = [
	[],
]

terraform_version = "0.12.3"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources